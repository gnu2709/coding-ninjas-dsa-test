
 import java.util.*;
public class Solution {



public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int t = sc.nextInt();
    while(t-- > 0){
        int n = sc.nextInt();
        ArrayList<Integer> first = new ArrayList<>();
        ArrayList<Integer> other = new ArrayList<>();
        for(int i = 0; i < n; i++){
            first.add(sc.nextInt());
        }
        for(int i = 0; i < n; i++){
            other.add(sc.nextInt());
        }
        if(validStackPermutation(first, other)){
            System.out.println("YES");
        }else{
            System.out.println("NO");
        }
    }
}



   public static boolean validStackPermutation(ArrayList<Integer> first, ArrayList<Integer> other){
        // Write your code here.
 Stack<Integer> stack = new Stack<>();
    int i = 0, j = 0;
    while(i < first.size()){
        if(first.get(i).equals(other.get(j))){
            i++;
            j++;
        }else{
            if(stack.isEmpty() || !stack.peek().equals(other.get(j))){
                stack.push(first.get(i));
                i++;
            }else{
                stack.pop();
                j++;
            }
        }
    }
    while(!stack.isEmpty() && j < other.size()){
        if(stack.pop().equals(other.get(j))){
            j++;
        }else{
            return false;
        }
    }
    return j == other.size();
}
}