/*class BinaryTreeNode<T> {
 public T data;
 public BinaryTreeNode<T> left;
 public BinaryTreeNode<T> right;

 public BinaryTreeNode(T data) {
 this.data = data;
 left=null;
 right=null;
 }*/
public class solution {

	static boolean isIsomorphic(BinaryTreeNode<Integer> n1, BinaryTreeNode<Integer> n2) {
		/*Your class should be named solution. 
		*Don't write main().
		*Don't take input, it is passed as function argument.
		*Don't print output.
		*Taking input and printing output is handled automatically.
		*/
		 if (n1 == null && n2 == null) {
        return true;
    }
    // if either one of the tree is empty, they are not isomorphic
    if (n1 == null || n2 == null) {
        return false;
    }
    // if the root data of both trees is not same, they are not isomorphic
    if (!n1.data.equals(n2.data)) {
        return false;
    }
    // check for isomorphism by swapping left and right subtrees of either n1 or n2
    return (isIsomorphic(n1.left, n2.left) && isIsomorphic(n1.right, n2.right)) ||
           (isIsomorphic(n1.left, n2.right) && isIsomorphic(n1.right, n2.left));
}}